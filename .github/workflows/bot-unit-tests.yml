name: Bot Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff scripts/ tests/

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=scripts --cov-report=xml --cov-report=term --cov-report=html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.12'
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r scripts/ -f json -o bandit-report.json || true
        bandit -r scripts/ -f txt

    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  python-compilation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Compile Python files
      run: |
        python -m py_compile scripts/*.py
        python -m compileall scripts/ -q

    - name: Check for syntax errors
      run: |
        python -c "
        import ast
        import sys
        from pathlib import Path
        
        errors = []
        for py_file in Path('scripts').glob('*.py'):
            try:
                with open(py_file, 'r') as f:
                    ast.parse(f.read(), filename=str(py_file))
                print(f'✅ {py_file} - syntax OK')
            except SyntaxError as e:
                errors.append(f'❌ {py_file} - {e}')
                print(f'❌ {py_file} - {e}')
        
        if errors:
            print(f'Found {len(errors)} syntax errors')
            sys.exit(1)
        else:
            print('All Python files have valid syntax')
        "

  test-results:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality, python-compilation]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Python compilation: ${{ needs.python-compilation.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.python-compilation.result }}" != "success" ]]; then
          echo "❌ Python compilation failed"
          exit 1
        fi
        
        echo "✅ All core tests passed"