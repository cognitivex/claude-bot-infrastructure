services:
  # Redis for work queue (optional - file-based queue is default)
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    container_name: claude-redis
    profiles: ["redis", "orchestrator"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Central Orchestrator (NEW ARCHITECTURE)
  claude-orchestrator:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile.dynamic
      args:
        PLATFORMS: ${ENABLED_PLATFORMS:-nodejs:18.16.0}
        BASE_IMAGE: ${BASE_IMAGE:-ubuntu:22.04}
    volumes:
      - orchestrator-data:/bot/data
      - orchestrator-logs:/bot/logs
      # Mount SSH config from host (read-only)
      - ~/.ssh:/home/bot/.ssh:ro
      # Mount project directory (if specified)
      - ${PROJECT_PATH:-./workspace}:/workspace
      # Mount Docker socket for worker container management
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # Required: API keys and tokens
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      
      # Git configuration
      - GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME:-Claude Bot}
      - GIT_AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-claude-bot@example.com}
      - GIT_COMMITTER_NAME=${GIT_COMMITTER_NAME:-Claude Bot}
      - GIT_COMMITTER_EMAIL=${GIT_COMMITTER_EMAIL:-claude-bot@example.com}
      
      # Orchestrator configuration
      - TARGET_REPO=${TARGET_REPO}
      - BOT_LABEL=${BOT_LABEL:-claude-bot}
      - BOT_ID=${BOT_ID:-claude-orchestrator}
      - MAX_WORKERS=${MAX_WORKERS:-3}
      - DISCOVERY_INTERVAL=${DISCOVERY_INTERVAL:-10}
      - PROCESSING_INTERVAL=${PROCESSING_INTERVAL:-2}
      
      # Platform configuration
      - ENABLED_PLATFORMS=${ENABLED_PLATFORMS:-nodejs:18.16.0}
      - AUTO_DETECT_PLATFORMS=${AUTO_DETECT_PLATFORMS:-true}
      - PLATFORMS_CONFIG=/bot/config/platforms.yml
      
      # Queue configuration
      - QUEUE_TYPE=${QUEUE_TYPE:-file}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Status reporting
      - STATUS_WEB_URL=http://claude-status-web:5000
      
      # Project configuration
      - PROJECT_PATH=/workspace
      - WORKSPACE_PATH=/workspace
    entrypoint: []
    command: ["bash", "-c", "cd /workspace && python3 -m claude_bot.orchestrator.central_orchestrator"]
    restart: unless-stopped
    container_name: claude-orchestrator
    profiles: ["orchestrator", "new-architecture"]
    depends_on:
      redis:
        condition: service_healthy
        required: false
    healthcheck:
      test: ["CMD", "python3", "-c", "import os; exit(0 if os.path.exists('/bot/data/queue') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Status Web Dashboard
  status-web:
    build:
      context: ./status-web
      dockerfile: Dockerfile
    ports:
      - "8080:5000"  # Status dashboard
    volumes:
      - status-data:/app/data
    environment:
      - FLASK_ENV=production
      - STATUS_DATA_DIR=/app/data
    restart: unless-stopped
    container_name: claude-status-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  # Orchestrator architecture volumes
  redis-data:
  orchestrator-data:
  orchestrator-logs:
  status-data: